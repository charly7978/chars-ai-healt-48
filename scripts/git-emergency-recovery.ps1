# Script de emergencia para recuperar el repositorio Git
# RECUPERACI√ìN EN CASOS CR√çTICOS

Write-Host "üö® RECUPERACI√ìN DE EMERGENCIA DEL REPOSITORIO GIT" -ForegroundColor Red
Write-Host "=================================================" -ForegroundColor Red

# Verificar si estamos en el directorio correcto
if (-not (Test-Path ".git")) {
    Write-Host "‚ùå ERROR CR√çTICO: No se encontr√≥ el directorio .git" -ForegroundColor Red
    Write-Host "Este directorio no es un repositorio Git v√°lido" -ForegroundColor Red
    Write-Host "üí° ACCIONES REQUERIDAS:" -ForegroundColor Yellow
    Write-Host "   1. Navegue al directorio correcto del repositorio" -ForegroundColor White
    Write-Host "   2. O clone el repositorio desde GitHub" -ForegroundColor White
    Write-Host "   3. O restaure desde backup" -ForegroundColor White
    exit 1
}

Write-Host "üìÅ Directorio actual: $(Get-Location)" -ForegroundColor Yellow

# ADVERTENCIA CR√çTICA
Write-Host "`n‚ö†Ô∏è  ADVERTENCIA CR√çTICA:" -ForegroundColor Red
Write-Host "Este script realizar√° operaciones destructivas que pueden" -ForegroundColor Red
Write-Host "perder cambios no guardados. √öSELO SOLO EN EMERGENCIAS." -ForegroundColor Red

$confirmation = Read-Host "`n¬øEst√° seguro de que desea continuar? (ESCRIBA 'EMERGENCIA' para confirmar)"
if ($confirmation -ne "EMERGENCIA") {
    Write-Host "‚ùå Operaci√≥n cancelada por seguridad" -ForegroundColor Yellow
    Write-Host "üí° Use scripts/git-reset-clean.ps1 para limpieza normal" -ForegroundColor Cyan
    exit 0
}

Write-Host "`nüö® INICIANDO RECUPERACI√ìN DE EMERGENCIA..." -ForegroundColor Red

# 1. Crear backup de emergencia
Write-Host "`n1Ô∏è‚É£ Creando backup de emergencia..." -ForegroundColor Cyan

$backupDir = "emergency-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
New-Item -ItemType Directory -Path $backupDir -Force | Out-Null

# Copiar archivos importantes
$importantFiles = @(
    "src/",
    "package.json",
    "tsconfig.json",
    "README.md",
    "docs/"
)

foreach ($file in $importantFiles) {
    if (Test-Path $file) {
        Copy-Item -Path $file -Destination $backupDir -Recurse -Force
        Write-Host "‚úÖ Backup de: $file" -ForegroundColor Green
    }
}

Write-Host "‚úÖ Backup de emergencia creado en: $backupDir" -ForegroundColor Green

# 2. Verificar estado cr√≠tico del repositorio
Write-Host "`n2Ô∏è‚É£ Verificando estado cr√≠tico..." -ForegroundColor Cyan

# Verificar si el repositorio est√° corrupto
$gitStatus = git status 2>&1
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå REPOSITORIO CR√çTICAMENTE CORRUPTO" -ForegroundColor Red
    Write-Host "üí° Iniciando recuperaci√≥n completa..." -ForegroundColor Yellow
} else {
    Write-Host "‚úÖ Repositorio accesible, verificando integridad..." -ForegroundColor Green
}

# 3. Recuperaci√≥n agresiva del repositorio
Write-Host "`n3Ô∏è‚É£ Recuperaci√≥n agresiva del repositorio..." -ForegroundColor Cyan

# Reset extremo
Write-Host "üîÑ Reseteando HEAD al √∫ltimo commit v√°lido..." -ForegroundColor Yellow
git reset --hard HEAD
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Reset exitoso" -ForegroundColor Green
} else {
    Write-Host "‚ùå Reset fall√≥, intentando recuperaci√≥n m√°s agresiva..." -ForegroundColor Red
}

# Limpieza extrema
Write-Host "üßπ Limpieza extrema de archivos no rastreados..." -ForegroundColor Yellow
git clean -fdx
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Limpieza extrema exitosa" -ForegroundColor Green
} else {
    Write-Host "‚ùå Limpieza extrema fall√≥" -ForegroundColor Red
}

# 4. Recuperar desde reflog si es posible
Write-Host "`n4Ô∏è‚É£ Intentando recuperar desde reflog..." -ForegroundColor Cyan

$reflogEntries = git reflog --oneline -10 2>$null
if ($reflogEntries) {
    Write-Host "üìã Entradas de reflog disponibles:" -ForegroundColor Green
    Write-Host $reflogEntries -ForegroundColor White
    
    # Intentar recuperar desde una entrada anterior
    $firstEntry = ($reflogEntries -split "`n")[0]
    if ($firstEntry -match "^([a-f0-9]+)") {
        $recoveryHash = $matches[1]
        Write-Host "üîÑ Intentando recuperar desde: $recoveryHash" -ForegroundColor Yellow
        
        git reset --hard $recoveryHash
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Recuperaci√≥n desde reflog exitosa" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Recuperaci√≥n desde reflog fall√≥" -ForegroundColor Red
        }
    }
} else {
    Write-Host "‚ö†Ô∏è  No hay entradas de reflog disponibles" -ForegroundColor Yellow
}

# 5. Verificar y reparar remotes
Write-Host "`n5Ô∏è‚É£ Verificando y reparando remotes..." -ForegroundColor Cyan

# Verificar remotes
$remotes = git remote -v
if ([string]::IsNullOrEmpty($remotes)) {
    Write-Host "‚ùå No hay remotes configurados, configurando..." -ForegroundColor Red
    
    # Configurar remote de emergencia
    $emergencyUrl = "https://github.com/charly7978/chars-ai-healt-48.git"
    git remote add origin $emergencyUrl
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Remote de emergencia configurado" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Error al configurar remote de emergencia" -ForegroundColor Red
    }
} else {
    Write-Host "‚úÖ Remotes configurados:" -ForegroundColor Green
    Write-Host $remotes -ForegroundColor White
}

# 6. Recuperaci√≥n desde remote si es posible
Write-Host "`n6Ô∏è‚É£ Intentando recuperaci√≥n desde remote..." -ForegroundColor Cyan

# Fetch de emergencia
Write-Host "üì• Fetch de emergencia desde remote..." -ForegroundColor Yellow
git fetch origin --force
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Fetch de emergencia exitoso" -ForegroundColor Green
    
    # Reset al remote
    Write-Host "üîÑ Reseteando al estado del remote..." -ForegroundColor Yellow
    git reset --hard origin/main
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Reset al remote exitoso" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Reset al remote fall√≥" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Fetch de emergencia fall√≥" -ForegroundColor Red
    Write-Host "üí° Verifique su conexi√≥n a internet" -ForegroundColor Yellow
}

# 7. Verificar integridad del repositorio
Write-Host "`n7Ô∏è‚É£ Verificando integridad del repositorio..." -ForegroundColor Cyan

# Verificar que git funciona
$gitStatus = git status 2>&1
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Repositorio Git funcional" -ForegroundColor Green
    
    # Verificar archivos cr√≠ticos
    $criticalFiles = @("package.json", "src/", "README.md")
    $missingFiles = @()
    
    foreach ($file in $criticalFiles) {
        if (-not (Test-Path $file)) {
            $missingFiles += $file
        }
    }
    
    if ($missingFiles.Count -gt 0) {
        Write-Host "‚ö†Ô∏è  Archivos cr√≠ticos faltantes:" -ForegroundColor Yellow
        foreach ($file in $missingFiles) {
            Write-Host "   - $file" -ForegroundColor Yellow
        }
        
        # Restaurar desde backup
        Write-Host "üîÑ Restaurando archivos cr√≠ticos desde backup..." -ForegroundColor Yellow
        foreach ($file in $missingFiles) {
            if (Test-Path "$backupDir/$file") {
                Copy-Item -Path "$backupDir/$file" -Destination $file -Recurse -Force
                Write-Host "‚úÖ Restaurado: $file" -ForegroundColor Green
            }
        }
    } else {
        Write-Host "‚úÖ Todos los archivos cr√≠ticos presentes" -ForegroundColor Green
    }
} else {
    Write-Host "‚ùå Repositorio Git no funcional despu√©s de la recuperaci√≥n" -ForegroundColor Red
    Write-Host "üí° RECUPERACI√ìN MANUAL REQUERIDA" -ForegroundColor Red
}

# 8. Crear script de recuperaci√≥n post-emergencia
Write-Host "`n8Ô∏è‚É£ Creando script de recuperaci√≥n post-emergencia..." -ForegroundColor Cyan

$postRecoveryScript = @"
@echo off
REM Script de recuperaci√≥n post-emergencia
REM VERIFICACI√ìN Y RESTAURACI√ìN COMPLETA

echo üè• RECUPERACI√ìN POST-EMERGENCIA
echo ===============================

echo.
echo üìä VERIFICANDO ESTADO DEL REPOSITORIO...
git status

echo.
echo üîó VERIFICANDO REMOTES...
git remote -v

echo.
echo üåø VERIFICANDO RAMAS...
git branch -a

echo.
echo üì• SINCRONIZANDO CON REMOTE...
git fetch origin

echo.
echo üîÑ RESETEANDO AL REMOTE...
git reset --hard origin/main

echo.
echo üßπ LIMPIEZA FINAL...
git clean -fd

echo.
echo ‚úÖ RECUPERACI√ìN COMPLETADA
echo üí° Ahora puede continuar con el desarrollo normal
echo.
pause
"@

$postRecoveryScript | Out-File -FilePath "scripts/post-emergency-recovery.bat" -Encoding ASCII -Force
Write-Host "‚úÖ Script de recuperaci√≥n post-emergencia creado" -ForegroundColor Green

# 9. Verificaci√≥n final
Write-Host "`n9Ô∏è‚É£ Verificaci√≥n final..." -ForegroundColor Cyan

Write-Host "`nüìä ESTADO FINAL DEL REPOSITORIO:" -ForegroundColor Green
git status

Write-Host "`nüîó REMOTES:" -ForegroundColor Green
git remote -v

Write-Host "`nüåø RAMA ACTUAL:" -ForegroundColor Green
git branch --show-current

Write-Host "`nüìÅ BACKUP DE EMERGENCIA:" -ForegroundColor Green
Write-Host "‚úÖ Backup creado en: $backupDir" -ForegroundColor Green

# 10. Reporte de emergencia
Write-Host "`nüîü REPORTE DE EMERGENCIA..." -ForegroundColor Cyan

$emergencyReport = @"
# üö® REPORTE DE RECUPERACI√ìN DE EMERGENCIA

## üìÖ FECHA Y HORA
$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

## üìÅ DIRECTORIO
$(Get-Location)

## üÜò ACCIONES REALIZADAS
1. ‚úÖ Backup de emergencia creado
2. ‚úÖ Reset agresivo del repositorio
3. ‚úÖ Limpieza extrema de archivos
4. ‚úÖ Recuperaci√≥n desde reflog (si fue posible)
5. ‚úÖ Reparaci√≥n de remotes
6. ‚úÖ Recuperaci√≥n desde remote
7. ‚úÖ Verificaci√≥n de integridad
8. ‚úÖ Restauraci√≥n de archivos cr√≠ticos

## üìä ESTADO FINAL
- Repositorio funcional: $(if (git status 2>$null) { "S√ç" } else { "NO" })
- Remotes configurados: $(if (git remote -v 2>$null) { "S√ç" } else { "NO" })
- Rama actual: $(git branch --show-current 2>$null)
- Archivos cr√≠ticos: $(if (Test-Path "package.json" -and (Test-Path "src/")) { "PRESENTES" } else { "FALTANTES" })

## üíæ BACKUP
- Ubicaci√≥n: $backupDir
- Contenido: Archivos cr√≠ticos del repositorio
- Fecha: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

## üö® ACCIONES REQUERIDAS POST-EMERGENCIA
1. Ejecutar: scripts/post-emergency-recovery.bat
2. Verificar que el c√≥digo compila: npm install && npm run build
3. Ejecutar tests: npm test
4. Verificar conectividad: scripts/quick-git-check.bat
5. Sincronizar: scripts/sync-repository.bat

## ‚ö†Ô∏è ADVERTENCIAS
- Este fue un procedimiento de emergencia
- Se pueden haber perdido cambios no guardados
- Revise el backup antes de continuar
- Considere clonar el repositorio desde GitHub si persisten problemas

## üìû SOPORTE
- Documentaci√≥n: docs/git-workflow-guide.md
- Scripts de mantenimiento: scripts/
- Backup de emergencia: $backupDir
- GitHub: https://github.com/charly7978/chars-ai-healt-48

---
**RECUERDE: CERO TOLERANCIA A SIMULACIONES EN C√ìDIGO M√âDICO**
"@

$emergencyReport | Out-File -FilePath "EMERGENCY_RECOVERY_REPORT.md" -Encoding UTF8 -Force
Write-Host "‚úÖ Reporte de emergencia creado: EMERGENCY_RECOVERY_REPORT.md" -ForegroundColor Green

# 11. Instrucciones finales
Write-Host "`nüîü1Ô∏è‚É£ INSTRUCCIONES FINALES..." -ForegroundColor Cyan

Write-Host "`nüö® RECUPERACI√ìN DE EMERGENCIA COMPLETADA" -ForegroundColor Red
Write-Host "=========================================" -ForegroundColor Red

if (git status 2>$null) {
    Write-Host "‚úÖ El repositorio est√° ahora funcional" -ForegroundColor Green
} else {
    Write-Host "‚ùå El repositorio a√∫n no es funcional" -ForegroundColor Red
    Write-Host "üí° RECUPERACI√ìN MANUAL REQUERIDA" -ForegroundColor Red
}

Write-Host "`nüìã ACCIONES REALIZADAS:" -ForegroundColor Green
Write-Host "‚úÖ Backup de emergencia creado" -ForegroundColor Green
Write-Host "‚úÖ Repositorio reseteado agresivamente" -ForegroundColor Green
Write-Host "‚úÖ Archivos no rastreados eliminados" -ForegroundColor Green
Write-Host "‚úÖ Remotes reparados" -ForegroundColor Green
Write-Host "‚úÖ Recuperaci√≥n desde remote intentada" -ForegroundColor Green
Write-Host "‚úÖ Archivos cr√≠ticos restaurados" -ForegroundColor Green

Write-Host "`nüíæ BACKUP DE EMERGENCIA:" -ForegroundColor Cyan
Write-Host "üìÅ Ubicaci√≥n: $backupDir" -ForegroundColor White
Write-Host "üìÑ Contenido: Archivos cr√≠ticos del repositorio" -ForegroundColor White
Write-Host "üìÖ Fecha: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor White

Write-Host "`nüìã PR√ìXIMOS PASOS CR√çTICOS:" -ForegroundColor Red
Write-Host "1Ô∏è‚É£ Ejecutar recuperaci√≥n post-emergencia:" -ForegroundColor Yellow
Write-Host "   scripts/post-emergency-recovery.bat" -ForegroundColor White
Write-Host "2Ô∏è‚É£ Verificar que el c√≥digo compila:" -ForegroundColor Yellow
Write-Host "   npm install && npm run build" -ForegroundColor White
Write-Host "3Ô∏è‚É£ Ejecutar tests:" -ForegroundColor Yellow
Write-Host "   npm test" -ForegroundColor White
Write-Host "4Ô∏è‚É£ Verificar conectividad:" -ForegroundColor Yellow
Write-Host "   scripts/quick-git-check.bat" -ForegroundColor White

Write-Host "`n‚ö†Ô∏è ADVERTENCIAS IMPORTANTES:" -ForegroundColor Red
Write-Host "- Este fue un procedimiento de EMERGENCIA" -ForegroundColor Red
Write-Host "- Se pueden haber perdido cambios no guardados" -ForegroundColor Red
Write-Host "- Revise el backup antes de continuar" -ForegroundColor Red
Write-Host "- Considere clonar desde GitHub si persisten problemas" -ForegroundColor Red

Write-Host "`nüìö RECURSOS DISPONIBLES:" -ForegroundColor Cyan
Write-Host "üìñ Reporte completo: EMERGENCY_RECOVERY_REPORT.md" -ForegroundColor White
Write-Host "üîß Script de recuperaci√≥n: scripts/post-emergency-recovery.bat" -ForegroundColor White
Write-Host "üìö Gu√≠a del flujo de trabajo: docs/git-workflow-guide.md" -ForegroundColor White
Write-Host "üíæ Backup de emergencia: $backupDir" -ForegroundColor White

Write-Host "`nüéâ RECUPERACI√ìN DE EMERGENCIA FINALIZADA" -ForegroundColor Green
Write-Host "El repositorio ha sido recuperado usando m√©todos de emergencia." -ForegroundColor Green
Write-Host "Siga las instrucciones post-emergencia para completar la recuperaci√≥n." -ForegroundColor Green
