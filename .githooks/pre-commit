#!/bin/bash

# üõ°Ô∏è PRE-COMMIT HOOK INTELIGENTE - PROTECCI√ìN M√âDICA COMPLETA
# Combina anti-simulaci√≥n + anti-conflictos + validaci√≥n inteligente + AUTOCORRECCI√ìN
# SIN FALSOS POSITIVOS - SOLO DETECCI√ìN REAL

echo "üõ°Ô∏è VERIFICANDO C√ìDIGO M√âDICO - SISTEMA INTELIGENTE ACTIVADO"
echo "üîç ANTI-SIMULACI√ìN + ANTI-CONFLICTOS + VALIDACI√ìN BIOF√çSICA + AUTOCORRECCI√ìN"

# üöÄ EJECUTAR AUTOCORRECCI√ìN DEFINITIVA ANTES DE LA VALIDACI√ìN
echo "üöÄ EJECUTANDO AUTOCORRECCI√ìN DEFINITIVA AUTOM√ÅTICA..."

# Detectar el sistema operativo
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
    # Windows - usar script batch (m√°s confiable)
    if [ -f "scripts/auto-fix-commit.bat" ]; then
        echo "üîß Ejecutando autocorrecci√≥n para Windows (Batch)..."
        cmd //c scripts\\auto-fix-commit.bat
    fi
else
    # Unix/Linux/Mac - usar script bash
    if [ -f "scripts/auto-fix-commit.sh" ]; then
        echo "üîß Ejecutando autocorrecci√≥n para Unix..."
        chmod +x scripts/auto-fix-commit.sh
        ./scripts/auto-fix-commit.sh
    fi
fi

echo "‚úÖ AUTOCORRECCI√ìN COMPLETADA - Continuando con validaci√≥n..."

# Verificar si hay archivos staged
staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$')

if [ -z "$staged_files" ]; then
    echo "‚úÖ No hay archivos de c√≥digo para verificar"
    exit 0
fi

echo "üìã Archivos a verificar:"
echo "$staged_files"

# Contadores inteligentes
critical_violations=0
merge_conflicts=0
false_positive_checks=0
total_files=0

echo "üß† EJECUTANDO VALIDACI√ìN INTELIGENTE..."

# Verificar cada archivo staged
while IFS= read -r file; do
    if [ -f "$file" ]; then
        total_files=$((total_files + 1))
        echo "   Verificando: $file"
        
        # 1. VERIFICACI√ìN ANTI-CONFLICTOS DE MERGE (100% precisa)
        if grep -n "^<<<<<<<" "$file" > /dev/null || \
           grep -n "^=======" "$file" > /dev/null || \
           grep -n "^>>>>>>>" "$file" > /dev/null; then
            echo "‚ùå CR√çTICO: Conflictos de merge detectados en $file"
            grep -n "^<<<<<<<\|^=======\|^>>>>>>>" "$file"
            merge_conflicts=$((merge_conflicts + 1))
            critical_violations=$((critical_violations + 1))
        fi
        
        # 2. VERIFICACI√ìN ANTI-SIMULACI√ìN INTELIGENTE (sin falsos positivos)
        
        # Math.random() - Solo si no est√° en comentarios o strings
        if grep -n "Math\.random()" "$file" > /dev/null; then
            # Verificar si est√° en comentarios o strings (evitar falsos positivos)
            if ! grep -n "Math\.random()" "$file" | grep -E "//.*Math\.random|/\*.*Math\.random|'.*Math\.random|\".*Math\.random" > /dev/null; then
                echo "‚ùå CR√çTICO: Math.random() detectado en $file"
                grep -n "Math\.random()" "$file"
                critical_violations=$((critical_violations + 1))
            else
                echo "‚úÖ Math.random() detectado pero en comentarios/strings (ignorado)"
                false_positive_checks=$((false_positive_checks + 1))
            fi
        fi
        
        # Keywords de simulaci√≥n - Solo si no est√°n en comentarios o strings
        simulation_patterns=("fake" "mock" "dummy" "simulate")
        for pattern in "${simulation_patterns[@]}"; do
            if grep -ni "$pattern" "$file" > /dev/null; then
                # Verificar si est√° en comentarios, strings o es parte de palabras v√°lidas
                if ! grep -ni "$pattern" "$file" | grep -E "//.*$pattern|/\*.*$pattern|'.*$pattern|\".*$pattern|mockData|mockApi|dummyData|simulate.*test" > /dev/null; then
                    echo "‚ùå CR√çTICO: Keyword de simulaci√≥n '$pattern' detectado en $file"
                    grep -ni "$pattern" "$file"
                    critical_violations=$((critical_violations + 1))
                else
                    echo "‚úÖ Keyword '$pattern' detectado pero en contexto v√°lido (ignorado)"
                    false_positive_checks=$((false_positive_checks + 1))
                fi
            fi
        done
        
        # 3. VALIDACI√ìN DE VALORES HARDCODEADOS INTELIGENTE
        # Solo detectar valores que realmente parezcan simulaciones
        
        # BPM hardcodeado - Solo si es un valor no fisiol√≥gico obvio
        bpm_matches=$(grep -n "bpm\s*[=:]\s*[0-9]\+" "$file" | grep -o "[0-9]\+" || true)
        for bpm in $bpm_matches; do
            # Solo reportar si es claramente no fisiol√≥gico
            if [ "$bpm" -lt 20 ] || [ "$bpm" -gt 250 ]; then
                echo "‚ùå CR√çTICO: BPM claramente no fisiol√≥gico ($bpm) en $file"
                grep -n "bpm\s*[=:]\s*$bpm" "$file"
                critical_violations=$((critical_violations + 1))
            elif [ "$bpm" -lt 30 ] || [ "$bpm" -gt 200 ]; then
                echo "‚ö†Ô∏è  ADVERTENCIA: BPM en rango l√≠mite ($bpm) en $file - Verificar si es real"
                grep -n "bpm\s*[=:]\s*$bpm" "$file"
            fi
        done
        
        # SpO2 hardcodeado - Solo si es claramente no fisiol√≥gico
        spo2_matches=$(grep -n "spo2\?\s*[=:]\s*[0-9]\+" "$file" | grep -o "[0-9]\+" || true)
        for spo2 in $spo2_matches; do
            # Solo reportar si es claramente no fisiol√≥gico
            if [ "$spo2" -lt 50 ] || [ "$spo2" -gt 110 ]; then
                echo "‚ùå CR√çTICO: SpO2 claramente no fisiol√≥gico ($spo2) en $file"
                grep -n "spo2\?\s*[=:]\s*$spo2" "$file"
                critical_violations=$((critical_violations + 1))
            elif [ "$spo2" -lt 70 ] || [ "$spo2" -gt 100 ]; then
                echo "‚ö†Ô∏è  ADVERTENCIA: SpO2 en rango l√≠mite ($spo2) en $file - Verificar si es real"
                grep -n "spo2\?\s*[=:]\s*$spo2" "$file"
            fi
        done
        
        # 4. VERIFICACI√ìN DE COMPONENTES OBSOLETOS
        if grep -n "HeartRateDisplay" "$file" > /dev/null; then
            echo "‚ùå OBSOLETO: HeartRateDisplay detectado en $file - Use HeartRate from @/components/HeartRate"
            critical_violations=$((critical_violations + 1))
        fi
        
        # 5. VERIFICACI√ìN DE DIRECTORIOS CR√çTICOS (m√°s inteligente)
        if [[ "$file" == src/security/* ]] || [[ "$file" == src/modules/vital-signs/* ]] || [[ "$file" == src/modules/signal-processing/* ]]; then
            echo "üîí Verificando archivo cr√≠tico: $file"
            # Solo reportar si hay simulaciones reales (no en comentarios)
            if grep -n "Math\.random()\|fake\|mock\|dummy" "$file" | grep -v "//.*Math\.random\|/\*.*Math\.random\|//.*fake\|//.*mock\|//.*dummy" > /dev/null; then
                echo "‚ùå CR√çTICO: Simulaci√≥n detectada en archivo m√©dico cr√≠tico $file"
                critical_violations=$((critical_violations + 1))
            fi
        fi
    fi
done <<< "$staged_files"

# Generar reporte final inteligente
echo ""
echo "üìä REPORTE DE VALIDACI√ìN INTELIGENTE"
echo "====================================="
echo "Archivos verificados: $total_files"
echo "Conflictos de merge: $merge_conflicts"
echo "Falsos positivos evitados: $false_positive_checks"
echo "Violaciones cr√≠ticas reales: $critical_violations"

if [ $critical_violations -gt 0 ]; then
    echo ""
    echo "üö® COMMIT RECHAZADO - VIOLACIONES CR√çTICAS DETECTADAS"
    echo ""
    echo "RAZONES DEL RECHAZO:"
    if [ $merge_conflicts -gt 0 ]; then
        echo "- Se detectaron $merge_conflicts conflictos de merge"
    fi
    echo "- Se detectaron $critical_violations violaciones cr√≠ticas reales"
    echo "- Uso de Math.random() en c√≥digo m√©dico (no en comentarios)"
    echo "- Keywords de simulaci√≥n en funciones cr√≠ticas (no en comentarios)"
    echo "- Valores claramente no fisiol√≥gicos hardcodeados"
    echo "- Componentes obsoletos detectados"
    echo ""
    echo "ACCIONES REQUERIDAS:"
    if [ $merge_conflicts -gt 0 ]; then
        echo "1. Resolver conflictos de merge: ejecuta 'scripts\\merge-protector.bat'"
    fi
    echo "2. Reemplazar Math.random() con crypto.getRandomValues()"
    echo "3. Eliminar keywords de simulaci√≥n reales (no en comentarios)"
    echo "4. Validar rangos fisiol√≥gicos (BPM: 30-200, SpO2: 70-100)"
    echo "5. Reemplazar componentes obsoletos"
    echo ""
    echo "üí° AYUDA:"
    if [ $merge_conflicts -gt 0 ]; then
        echo "- Para conflictos de merge: scripts\\merge-protector.bat"
    fi
    echo "- Use simulationEradicator.generateCryptographicRandom() en lugar de Math.random()"
    echo "- Los comentarios y strings son ignorados (no falsos positivos)"
    echo "- Solo se reportan simulaciones reales en c√≥digo ejecutable"
    echo ""
    echo "‚ùå COMMIT BLOQUEADO - CORRIJA LAS VIOLACIONES ANTES DE CONTINUAR"
    exit 1
fi

echo "‚úÖ VALIDACI√ìN INTELIGENTE EXITOSA"
echo "   - Sin simulaciones reales detectadas"
echo "   - Sin conflictos de merge detectados"
echo "   - Falsos positivos evitados: $false_positive_checks"
echo "   - Todos los valores en rangos fisiol√≥gicos v√°lidos"
echo "   - Componentes actualizados"
echo "   - C√≥digo apto para producci√≥n m√©dica"
echo ""
echo "üè• COMMIT APROBADO PARA APLICACI√ìN M√âDICA"
echo "üß† Sistema inteligente: $false_positive_checks falsos positivos evitados"
exit 0