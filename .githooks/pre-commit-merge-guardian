#!/bin/bash

# Pre-commit hook para prevenir conflictos de merge
# Integrado con el sistema anti-simulaci√≥n existente

echo "üõ°Ô∏è VERIFICANDO C√ìDIGO M√âDICO - SIN SIMULACIONES PERMITIDAS"
echo "üõ°Ô∏è VERIFICANDO CONFLICTOS DE MERGE - SIN CONFLICTOS PERMITIDOS"

# Verificar si hay archivos staged
staged_files=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$')

if [ -z "$staged_files" ]; then
    echo "‚úÖ No hay archivos de c√≥digo para verificar"
    exit 0
fi

echo "üìã Archivos a verificar:"
echo "$staged_files"

# Flag para tracking de violaciones cr√≠ticas
critical_violations=0
merge_conflicts=0
total_files=0

echo "üîç EJECUTANDO VALIDACI√ìN ANTI-SIMULACI√ìN Y ANTI-CONFLICTOS..."

# Verificar cada archivo staged
while IFS= read -r file; do
    if [ -f "$file" ]; then
        total_files=$((total_files + 1))
        echo "   Verificando: $file"
        
        # VERIFICACI√ìN ANTI-CONFLICTOS DE MERGE
        if grep -n "^<<<<<<<" "$file" > /dev/null || \
           grep -n "^=======" "$file" > /dev/null || \
           grep -n "^>>>>>>>" "$file" > /dev/null; then
            echo "‚ùå CR√çTICO: Conflictos de merge detectados en $file"
            grep -n "^<<<<<<<\|^=======\|^>>>>>>>" "$file"
            merge_conflicts=$((merge_conflicts + 1))
            critical_violations=$((critical_violations + 1))
        fi
        
        # VERIFICACI√ìN ANTI-SIMULACI√ìN (mantener tu sistema existente)
        if grep -n "Math\.random()" "$file" > /dev/null; then
            echo "‚ùå CR√çTICO: Math.random() detectado en $file"
            grep -n "Math\.random()" "$file"
            critical_violations=$((critical_violations + 1))
        fi
        
        # Verificar keywords de simulaci√≥n
        simulation_patterns=("fake" "mock" "dummy" "simulate")
        for pattern in "${simulation_patterns[@]}"; do
            if grep -ni "$pattern" "$file" | grep -v "// REAL DATA\|// NO SIMULATION" > /dev/null; then
                echo "‚ùå CR√çTICO: Keyword de simulaci√≥n '$pattern' detectado en $file"
                grep -ni "$pattern" "$file" | grep -v "// REAL DATA\|// NO SIMULATION"
                critical_violations=$((critical_violations + 1))
            fi
        done
        
        # Verificar valores hardcodeados sospechosos
        if grep -n "bpm\s*[=:]\s*[0-9]" "$file" > /dev/null; then
            echo "‚ö†Ô∏è  ADVERTENCIA: Posible BPM hardcodeado en $file"
            grep -n "bpm\s*[=:]\s*[0-9]" "$file"
        fi
        
        if grep -n "spo2\?\s*[=:]\s*[0-9]" "$file" > /dev/null; then
            echo "‚ö†Ô∏è  ADVERTENCIA: Posible SpO2 hardcodeado en $file"
            grep -n "spo2\?\s*[=:]\s*[0-9]" "$file"
        fi
        
        # Verificar rangos fisiol√≥gicos
        bpm_values=$(grep -o "bpm\s*[=:]\s*[0-9]\+" "$file" | grep -o "[0-9]\+" || true)
        for bpm in $bpm_values; do
            if [ "$bpm" -lt 30 ] || [ "$bpm" -gt 200 ]; then
                echo "‚ùå CR√çTICO: BPM no fisiol√≥gico ($bpm) en $file"
                critical_violations=$((critical_violations + 1))
            fi
        done
        
        spo2_values=$(grep -o "spo2\?\s*[=:]\s*[0-9]\+" "$file" | grep -o "[0-9]\+" || true)
        for spo2 in $spo2_values; do
            if [ "$spo2" -lt 70 ] || [ "$spo2" -gt 100 ]; then
                echo "‚ùå CR√çTICO: SpO2 no fisiol√≥gico ($spo2) en $file"
                critical_violations=$((critical_violations + 1))
            fi
        done
    fi
done <<< "$staged_files"

# Verificar archivos de configuraci√≥n cr√≠ticos
config_files=("src/security/" "src/modules/vital-signs/" "src/modules/signal-processing/")
for config_dir in "${config_files[@]}"; do
    if [ -d "$config_dir" ]; then
        echo "üîí Verificando directorio cr√≠tico: $config_dir"
        if find "$config_dir" -name "*.ts" -o -name "*.tsx" | xargs grep -l "Math\.random\|fake\|mock\|dummy" > /dev/null 2>&1; then
            echo "‚ùå CR√çTICO: Simulaci√≥n detectada en directorio m√©dico cr√≠tico $config_dir"
            critical_violations=$((critical_violations + 1))
        fi
    fi
done

# Generar reporte final
echo ""
echo "üìä REPORTE DE VALIDACI√ìN M√âDICA Y ANTI-CONFLICTOS"
echo "=================================================="
echo "Archivos verificados: $total_files"
echo "Conflictos de merge: $merge_conflicts"
echo "Violaciones cr√≠ticas totales: $critical_violations"

if [ $critical_violations -gt 0 ]; then
    echo ""
    echo "üö® COMMIT RECHAZADO - VIOLACIONES CR√çTICAS DETECTADAS"
    echo ""
    echo "RAZONES DEL RECHAZO:"
    if [ $merge_conflicts -gt 0 ]; then
        echo "- Se detectaron $merge_conflicts conflictos de merge"
    fi
    echo "- Se detectaron $critical_violations violaciones cr√≠ticas totales"
    echo "- Uso de Math.random() en c√≥digo m√©dico"
    echo "- Keywords de simulaci√≥n en funciones cr√≠ticas"
    echo "- Valores no fisiol√≥gicos hardcodeados"
    echo ""
    echo "ACCIONES REQUERIDAS:"
    if [ $merge_conflicts -gt 0 ]; then
        echo "1. Resolver conflictos de merge: ejecuta 'merge-guardian.bat fix'"
    fi
    echo "2. Reemplazar Math.random() con crypto.getRandomValues()"
    echo "3. Eliminar keywords de simulaci√≥n (fake, mock, dummy, simulate)"
    echo "4. Validar rangos fisiol√≥gicos (BPM: 30-200, SpO2: 70-100)"
    echo "5. Asegurar que todos los datos provienen de sensores reales"
    echo ""
    echo "üí° AYUDA:"
    if [ $merge_conflicts -gt 0 ]; then
        echo "- Para conflictos de merge: merge-guardian.bat fix"
    fi
    echo "- Use simulationEradicator.generateCryptographicRandom() en lugar de Math.random()"
    echo "- Implemente validaci√≥n biof√≠sica estricta"
    echo "- Consulte la documentaci√≥n m√©dica en /docs/medical-validation.md"
    echo ""
    echo "‚ùå COMMIT BLOQUEADO - CORRIJA LAS VIOLACIONES ANTES DE CONTINUAR"
    exit 1
fi

echo "‚úÖ VALIDACI√ìN M√âDICA Y ANTI-CONFLICTOS EXITOSA"
echo "   - Sin simulaciones detectadas"
echo "   - Sin conflictos de merge detectados"
echo "   - Todos los valores en rangos fisiol√≥gicos"
echo "   - C√≥digo apto para producci√≥n m√©dica"
echo ""
echo "üè• COMMIT APROBADO PARA APLICACI√ìN M√âDICA"
exit 0
